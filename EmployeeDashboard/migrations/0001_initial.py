# Generated by Django 5.0.3 on 2024-11-04 09:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('dob', models.DateField(verbose_name='Date of Birth')),
                ('place_of_birth', models.CharField(max_length=100)),
                ('employee_status', models.CharField(choices=[('Active', 'Active'), ('InActive', 'InActive')], max_length=15)),
                ('father_name', models.CharField(max_length=100)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married')], max_length=15)),
                ('nationality', models.CharField(max_length=50)),
                ('blood_group', models.CharField(blank=True, max_length=3, null=True)),
                ('address', models.TextField(verbose_name='Current Address')),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('mobile', models.CharField(max_length=20)),
                ('alternate_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('personal_email', models.EmailField(max_length=254)),
                ('work_email', models.EmailField(max_length=254)),
                ('passport_no', models.CharField(blank=True, max_length=20, null=True)),
                ('passport_valid_from', models.DateField(blank=True, null=True)),
                ('passport_valid_upto', models.DateField(blank=True, null=True)),
                ('passport_file_upload', models.FileField(blank=True, null=True, upload_to='passport_docs/')),
                ('visa_file_upload', models.FileField(blank=True, null=True, upload_to='visa_docs/')),
                ('pan_name', models.CharField(max_length=100, verbose_name='Name as on PAN')),
                ('pan_number', models.CharField(max_length=10)),
                ('pan_upload_file', models.FileField(blank=True, null=True, upload_to='pan_docs/')),
                ('aadhar_name', models.CharField(max_length=100, verbose_name='Name as on Aadhar')),
                ('aadhar_number', models.CharField(max_length=12)),
                ('aadhar_file_upload', models.FileField(blank=True, null=True, upload_to='aadhar_docs/')),
                ('pf_member', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Are you a member of PF?')),
                ('pf_number', models.CharField(blank=True, max_length=20, null=True)),
                ('pf_withdrawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Have you withdrawn from previous PF account?')),
                ('uan_number', models.CharField(blank=True, max_length=20, null=True)),
                ('uan_confirmed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3)),
                ('active_visa', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3)),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('date_of_joining', models.DateField()),
                ('position', models.CharField(max_length=50)),
                ('department', models.CharField(max_length=50)),
                ('employment_type', models.CharField(choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('Contract', 'Contract')], max_length=15)),
                ('reporting_manager', models.CharField(max_length=100)),
                ('job_location', models.CharField(max_length=100)),
                ('work_schedule', models.CharField(max_length=50)),
                ('job_related_documents', models.FileField(blank=True, null=True, upload_to='job_docs/')),
                ('highest_degree', models.CharField(max_length=50)),
                ('institution_name', models.CharField(max_length=100)),
                ('field_of_study', models.CharField(max_length=50)),
                ('year_of_graduation', models.IntegerField()),
                ('certifications', models.FileField(blank=True, null=True, upload_to='certifications/')),
                ('previous_company_name', models.CharField(max_length=100)),
                ('previous_job_title', models.CharField(max_length=50)),
                ('previous_work_location', models.CharField(max_length=100)),
                ('previous_exit_date', models.DateField()),
                ('responsibilities', models.TextField()),
                ('reason_for_leaving', models.TextField()),
                ('reference_1_name', models.CharField(max_length=100)),
                ('reference_1_designation', models.CharField(max_length=50)),
                ('reference_1_company_name', models.CharField(max_length=100)),
                ('reference_1_contact', models.CharField(max_length=20)),
                ('reference_1_email', models.EmailField(max_length=254)),
                ('reference_2_name', models.CharField(max_length=100)),
                ('reference_2_designation', models.CharField(max_length=50)),
                ('reference_2_company_name', models.CharField(max_length=100)),
                ('reference_2_contact', models.CharField(max_length=20)),
                ('reference_2_email', models.EmailField(max_length=254)),
                ('emergency_first_name', models.CharField(max_length=100)),
                ('emergency_middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_last_name', models.CharField(max_length=100)),
                ('emergency_relationship', models.CharField(max_length=50)),
                ('emergency_home_phone', models.CharField(max_length=20)),
                ('emergency_mobile_phone', models.CharField(max_length=20)),
                ('emergency_city', models.CharField(max_length=50)),
                ('emergency_state', models.CharField(max_length=50)),
                ('emergency_zip_code', models.CharField(max_length=10)),
                ('bank_name_on_account', models.CharField(max_length=100, verbose_name='Name as on Bank Account')),
                ('bank_account_number', models.CharField(max_length=20)),
                ('bank_name', models.CharField(max_length=100)),
                ('bank_branch_name', models.CharField(max_length=100)),
                ('bank_ifsc_code', models.CharField(max_length=11)),
                ('bank_branch_address', models.TextField()),
                ('passbook_file_upload', models.FileField(blank=True, null=True, upload_to='passbook_docs/')),
                ('offer_letter', models.FileField(blank=True, null=True, upload_to='employee_docs/offer_letters/')),
                ('nda_form', models.FileField(blank=True, null=True, upload_to='employee_docs/nda_forms/')),
                ('btech_memo', models.FileField(blank=True, null=True, upload_to='employee_docs/btech_memo/')),
                ('btech_tc', models.FileField(blank=True, null=True, upload_to='employee_docs/btech_tc/')),
                ('relieving_letter', models.FileField(blank=True, null=True, upload_to='employee_docs/relieving_letters/')),
                ('experience_letter', models.FileField(blank=True, null=True, upload_to='employee_docs/experience_letters/')),
                ('payslips', models.FileField(blank=True, null=True, upload_to='employee_docs/payslips/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('department', models.CharField(blank=True, choices=[('development', 'Development'), ('content_moderators', 'Content Moderators'), ('sales_team', 'Sales Team'), ('customer_support', 'Customer Support Team')], max_length=30, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
